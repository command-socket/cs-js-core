{"version":3,"sources":["schema/ts/schema/message/command-socket-message-factory.ts"],"names":["command_socket_message_1","require","IDUtilities","__importStar","CommandSocketMessageFactory","[object Object]","command","parameters","requestingCommandSocket","timeSent","Date","now","id","ip","getSocketIdentity","meta","request","response","timeline","requestSent","requestReceived","responseSent","responseReceived","mode","correspondenceID","generateID","CORRESPONDENCE_ID_LENGTH","didError","return","returnValueOrError","respondingCommandSocket","timeReceived","returnValue","error","name","message","exports"],"mappings":"gkBAMA,MAAAA,yBAAAC,QAAA,4BAMAC,YAAAC,aAAAF,QAAA,4BAYA,MAAaG,4BAELC,4BACNC,EACAC,EACAC,EACAC,EAAmBC,KAAKC,wDAGxB,IAAIC,GAAEA,EAAEC,GAAEA,SAAoCL,EAAwBM,oBAEtE,MAAO,CAENR,QAAAA,EAEAS,KAAM,CAELC,QAAS,CAAEJ,GAAAA,EAAIC,GAAAA,GAEfI,SAAU,KAEVC,SAAU,CAETC,YAAaV,EAEbW,gBAAiB,KAEjBC,aAAc,KAEdC,iBAAkB,MAInBC,KAAM,UAENC,iBAAkBtB,YAAYuB,WAAWzB,yBAAA0B,0BAEzCC,UAAU,GAIXpB,WAAAA,EAEAqB,OAAQ,SAeHvB,6BACNW,EACAa,EACAC,EAAwCH,GAAoB,EAAOI,EAAuBrB,KAAKC,MAC/FF,EAAmBC,KAAKC,wDAExB,IAEIqB,GAFApB,GAAEA,EAAEC,GAAEA,SAAoCiB,EAAwBhB,oBAItE,GAAIa,EAAU,CAEb,IAAIM,EAA4BJ,EAEhCG,EAAc,CAEbE,KAAMD,EAAMC,KACZC,QAASF,EAAME,cAIVH,EAAcH,EAErB,MAAO,CAENvB,QAASU,EAAQV,QAEjBS,KAAM,CAELC,QAASA,EAAQD,KAAKC,QAEtBC,SAAU,CAAEL,GAAAA,EAAIC,GAAAA,GAEhBK,SAAU,CAETC,YAAaH,EAAQD,KAAKG,SAASC,YAEnCC,gBAAiBW,EAEjBV,aAAcZ,EAEda,iBAAkB,MAInBC,KAAM,WAENC,iBAAkBR,EAAQD,KAAKS,iBAE/BG,SAAAA,GAIDpB,WAAYS,EAAQT,WAEpBqB,OAAQI,OAjHXI,QAAAhC,4BAAAA","file":"command-socket-message-factory.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t7:04 PM -- October 29th, 2019.\n *\tProject: @command-socket/core\n */\n\nimport {\n\tCommandSocketRequestMessage,\n\tCommandSocketResponseMessage,\n\tCORRESPONDENCE_ID_LENGTH\n} from \"./command-socket-message\";\nimport { CommandSocketIdentity } from \"../command-socket-identity\";\nimport * as IDUtilities from \"../../util/id-utilities\";\nimport { CommandSocketError } from \"../../error/command-socket-error\";\nimport { CommandSocket } from \"../../command-socket/command-socket\";\nimport { CommandStructure, CommandStructureParameterType, CommandStructureReturnType } from \"../command/command-structure\";\n\n/**\n * A factory/utility class for creating new {@link CommandSocketMessage}s.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class CommandSocketMessageFactory {\n\t\n\tpublic static async createRequestMessage<Command extends CommandStructure>(\n\t\tcommand: string,\n\t\tparameters: CommandStructureParameterType<Command>,\n\t\trequestingCommandSocket: CommandSocket,\n\t\ttimeSent: number = Date.now()\n\t\t): Promise<CommandSocketRequestMessage<Command>> {\n\t\t\n\t\tlet { id, ip }: CommandSocketIdentity = await requestingCommandSocket.getSocketIdentity();\n\t\t\n\t\treturn {\n\t\t\t\n\t\t\tcommand,\n\t\t\t\n\t\t\tmeta: {\n\t\t\t\t\n\t\t\t\trequest: { id, ip },\n\t\t\t\t\n\t\t\t\tresponse: null,\n\t\t\t\t\n\t\t\t\ttimeline: {\n\t\t\t\t\t\n\t\t\t\t\trequestSent: timeSent,\n\t\t\t\t\t\n\t\t\t\t\trequestReceived: null,\n\t\t\t\t\t\n\t\t\t\t\tresponseSent: null,\n\t\t\t\t\t\n\t\t\t\t\tresponseReceived: null\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tmode: \"request\",\n\t\t\t\t\n\t\t\t\tcorrespondenceID: IDUtilities.generateID(CORRESPONDENCE_ID_LENGTH),\n\t\t\t\t\n\t\t\t\tdidError: false\n\t\t\t\t\n\t\t\t},\n\t\t\t\n\t\t\tparameters,\n\t\t\t\n\t\t\treturn: null\n\t\t\t\n\t\t};\n\t\t\n\t}\n\t\n\tpublic static async createResponseMessage<Command extends CommandStructure>(\n\t\trequest: CommandSocketRequestMessage<Command>, returnValue: CommandStructureReturnType<Command>,\n\t\trespondingCommandSocket: CommandSocket, didError?: false, timestamp?: number):\n\t\tPromise<CommandSocketResponseMessage<Command>>;\n\t\n\tpublic static async createResponseMessage<Command extends CommandStructure>(\n\t\trequest: CommandSocketRequestMessage<Command>, error: CommandSocketError, respondingCommandSocket: CommandSocket,\n\t\tdidError?: true, timestamp?: number): Promise<CommandSocketResponseMessage<Command>>;\n\t\n\tpublic static async createResponseMessage<Command extends CommandStructure>(\n\t\trequest: CommandSocketRequestMessage<Command>,\n\t\treturnValueOrError: CommandStructureReturnType<Command> | CommandSocketError,\n\t\trespondingCommandSocket: CommandSocket, didError: boolean = false, timeReceived: number = Date.now(),\n\t\ttimeSent: number = Date.now()): Promise<CommandSocketResponseMessage<Command>> {\n\t\t\n\t\tlet { id, ip }: CommandSocketIdentity = await respondingCommandSocket.getSocketIdentity();\n\t\t\n\t\tlet returnValue: any;\n\t\t\n\t\tif (didError) {\n\t\t\t\n\t\t\tlet error: CommandSocketError = returnValueOrError as CommandSocketError;\n\t\t\t\n\t\t\treturnValue = {\n\t\t\t\t\n\t\t\t\tname: error.name,\n\t\t\t\tmessage: error.message\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t} else returnValue = returnValueOrError;\n\t\t\n\t\treturn {\n\t\t\t\n\t\t\tcommand: request.command,\n\t\t\t\n\t\t\tmeta: {\n\t\t\t\t\n\t\t\t\trequest: request.meta.request,\n\t\t\t\t\n\t\t\t\tresponse: { id, ip },\n\t\t\t\t\n\t\t\t\ttimeline: {\n\t\t\t\t\t\n\t\t\t\t\trequestSent: request.meta.timeline.requestSent,\n\t\t\t\t\t\n\t\t\t\t\trequestReceived: timeReceived,\n\t\t\t\t\t\n\t\t\t\t\tresponseSent: timeSent,\n\t\t\t\t\t\n\t\t\t\t\tresponseReceived: null\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tmode: \"response\",\n\t\t\t\t\n\t\t\t\tcorrespondenceID: request.meta.correspondenceID,\n\t\t\t\t\n\t\t\t\tdidError\n\t\t\t\t\n\t\t\t},\n\t\t\t\n\t\t\tparameters: request.parameters,\n\t\t\t\n\t\t\treturn: returnValue\n\t\t\t\n\t\t};\n\t\t\n\t}\n\t\n}"]}